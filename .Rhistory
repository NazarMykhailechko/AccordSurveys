page <- read_xml(xmlFileName)
page %>% xml_find_first(".//DATA") %>% xml_add_sibling("HEAD", .where = "before")
page %>% xml_find_first(".//HEAD") %>% xml_add_child("STATFORM", "FFR0")
page %>% xml_find_first(".//HEAD") %>% xml_add_child("EDRPOU", okpo)
page %>% xml_find_first(".//HEAD") %>% xml_add_child("REPORTDATE", dates)
xml2::write_xml(page, file = xmlFileName)
}
}
install.packages("dplyr")
library(dplyr)
apply(mtcars,2,mean)
apply(mtcars,2,sd)
apply(mtcars,1,sd)
apply(mtcars,1,range)
apply(mtcars,2,range)
mtcars
colMeans(mtcars)
colMeans(mtcars)
colSums(mtcars)
colSums(mtcars,na.rm = )
rowMeans(mtcars)
apply(mtcars,1,mean)
mtcars$mpg[mtcars$mpg > 10]
mtcars$mpg[mtcars$mpg > 20]
apply(mtcars,)
apply(mtcars,1,mean)
apply(mtcars,2,mean)
apply(mtcars,2,function(x) <- shapiro.test(x))
apply(mtcars,2,function(x) shapiro.test(x))
apply(mtcars,2,function(x) shapiro.test(x)$p.value)
hist(mtcars$mpg)
shapiro.test(mtcars$mpg)
apply(mtcars,1,function(x) shapiro.test(x)$p.value)
apply(mtcars,2,function(x) shapiro.test(x)$p.value)
apply(mtcars,1,function(x) shapiro.test(x)$p.value)
apply(mtcars,2,function(x) shapiro.test(x)$p.value)
shapiro.test(mtcars$mpg)
shapiro.test(mtcars$cyl)
shapiro.test(mtcars$drat)
mtcars
mtcars[1]
by(mtcars[1], mtcars$cyl,mean)
by(mtcars[1], mtcars$cyl,colMeans)
by(mtcars[1], mtcars$cyl,function(x) shapiro.test(x)$p.value)
aggregate(mpg~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg~cyl,mtcars,mean)
shapiro.test(mtcars[mtcars$cyl=4]$mpg)
shapiro.test(mtcars[mtcars$cyl==4]$mpg)
mtcars[mtcars$cyl==4]
mtcars[mtcars$cyl=4]
mtcars[cyl=4]
mtcars[cyl==4]
mtcars[cyl==4,]
mtcars[,cyl==4]
mtcars[,cyl=4]
mtcars[cyl=4,]
mtcars$cyl[mtcars$cyl=4]
mtcars$cyl[mtcars$cyl==4]
mtcars$mpg[mtcars$cyl==4]
shapiro.test(mtcars$mpg[mtcars$cyl==4])
aggregate(mpg~cyl,mtcars,function(x) shapiro.test(x)$p.value)
by(mtcars[1], mtcars$cyl,function(x) shapiro.test(x)$p.value)
by(mtcars[1], mtcars$cyl,mean
)
by(mtcars[1], mtcars$cyl,mean,na.rm=T)
by(mtcars[1], mtcars$cyl,colMeans)
aggregate(mpg~cyl,mtcars,function(x) shapiro.test(x)$p.value)
by(mtcars[1], mtcars$cyl,function(x) shapiro.test(x)$p.value)
aggregate(.~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(ьзп.~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg.~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(. ~cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(. ~ cyl,mtcars,function(x) shapiro.test(x)$p.value)
mctars
mtcars
aggregate(disp ~ cyl,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(disp ~ carb,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg ~ carb,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg ~ gear,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg ~ am,mtcars,function(x) shapiro.test(x)$p.value)
aggregate(mpg ~ carb,mtcars,function(x) shapiro.test(x)$p.value)
as_data_frame(mtcars)
as_tibble(mtcars)
arrange(mtcars,mpg)
arrange(mtcars,-mpg)
arrange(mtcars,-mpg,cyl)
arrange(mtcars,-mpg,-cyl)
group_by(mtcars,cyl)
group_by(mtcars,cyl,sum
)
?I()
group_by(mtcars,am)
names(diamonds)
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1))
mx
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1),nrow = 3,ncol = 3)
mx
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1),nrow = 3,ncol = 3,byrow = F)
mx
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1),nrow = 3,ncol = 3,byrow = T)
mx
x<-c(-16,-6,9)
solve(mx,x)
x<-matrix(c(-16,-6,9),nrow = 2,ncol = 1)
x<-matrix(c(-16,-6,9),nrow = 2,ncol = 1,byrow = F)
x<-matrix(c(-16,-6,9),nrow = 2,ncol = 1,byrow = T)
x<-matrix(c(-16,-6,9),nrow = 3,ncol = 1,byrow = T)
x
solve(mx,x)
mx
solve(mx,x)
mx <- matrix(c(5,2,-4,1,3,0,2,-3,1),nrow = 3,ncol = 3,byrow = T)
mx
solve(mx,x)
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1),nrow = 3,ncol = 3,byrow = T)
mx
solve(mx,x)
det(mx)
cls
mx <- matrix(c(5,2,-4,1,0,3,2,-3,1),nrow = 3,ncol = 3,byrow = T)
mx
x<-matrix(c(-16,-6,9),nrow = 3,ncol = 1,byrow = T)
x
solve(mx,x)
library(jsonlite)
fromJSON("https://bank.gov.ua/files/from_api/bank_managers.json")
View(fromJSON("https://bank.gov.ua/files/from_api/bank_managers.json"))
reticulate::repl_python()
import pandas as pd
exit
reticulate::repl_python()
import pandas as pd
exit
py_run_file("Untitled1.py")
library(reticulate)
py_run_file("Untitled1.py")
py_run_file("111.py")
py_run_file("C:\Users\accord\Desktop\111.py")
py_run_file("C:\\Users\\accord\\Desktop\\111.py")
source_python("C:\\Users\\accord\\Desktop\\111.py")
repl_python()
import pyodbc
import pandas as pd
import pandas
import pyodbc
import pandas as pd
import pyodbc
import pandas as pd
import pandas as pd
pd <- import(pandas, as = pd, convert =FALSE)
pd <- import("pandas", as = "pd"", convert =FALSE)
pd <- import("pandas", as = "pd", convert =FALSE)
library(Reticulate)
import pyodbc
library(reticulate)
exit
library(reticulate)
reticulate::repl_python()
library(reticulate)
exit
library(reticulate)
reticulate::repl_python()
pd <- import("pandas", as = "pd", convert =FALSE)
pd <- import(("pandas", as = "pd", convert=FALSE)
repl_pyrhon()
exit
reticulate::repl_python()
library(reticulate)
repl_pyrhon()
library(reticulate)
repl_python()
exit
reticulate::repl_python()
library(reticulate)
repl_python()
reticulate::repl_python()
quit
library(reticulate)
reticulate::repl_python()
import pandas as pd
pip install pandas
import pandas as pd
import pyodbc
import pyodbc
conn = pyodbc.connect(r'Driver={SQL Server};Server=DESKTOP-3D58FB2\SQLEXPRESS;Trusted_Connection=yes;Database=crmsystem;')
ssql = '''select * from (SELECT [id]
,[ARTICLE]
,[ROW]
FROM [crmsystem].[dbo].[balance_articles]) AS Q
left join
(SELECT [OKPO]
,[ROW] AS ROWS
,[DATE]
,[SUMM]
FROM [crmsystem].[dbo].[DATABASEFINZVIT]
where okpo = '44059116') AS QQ
on Q.ROW = QQ.ROWS
'''
dfff = pd.read_sql(ssql,conn)
print(dfff.head())
dfff.head()
View(dfff.head())
df = pd.read_excel(r"d:\XML\banksdata4.xlsx")
df = pd.read_excel(r"d:\XML\banksdata4.xlsx")
df_model = df.copy()
train = df_model[df_model['dates'] < '2025-03-01']
predict = df_model[df_model['dates'] == '2025-03-01']
train['dates'] = str([train['dates']])
train['glb'] = str([train['glb']])
predict['dates'] = str([predict['dates']])
predict['glb'] = str([predict['glb']])
train_cleaned = train.drop(train.select_dtypes(['object']), axis=1)
predict_cleaned = predict.drop(predict.select_dtypes(['object']), axis=1)
x_train = train_cleaned.drop('y', axis = 1).values
y_train = train_cleaned['y'].values
x_test = predict_cleaned.drop('y', axis = 1).values
y_test = predict_cleaned['y'].values
mms = MinMaxScaler()
mms.fit(x_train)
x_train_norm = pd.DataFrame(mms.transform(x_train), columns=pd.DataFrame(x_train).columns)
#mms.fit(x_test)
x_test_norm = pd.DataFrame(mms.transform(x_test), columns=pd.DataFrame(x_test).columns)
print(x_train_norm.describe())
print(x_test_norm.describe())
logisticRegr = LogisticRegression()
logisticRegr.fit(x_train_norm, y_train)
print(logisticRegr.score(x_train_norm, y_train))
print(logisticRegr.coef_)
print(logisticRegr.intercept_)
prediction = logisticRegr.predict_proba(x_test_norm)
prediction = prediction[:,1].tolist()
print(prediction)
#Creating a new column called Prediction in predict dataframe
predict = predict.assign(Prediction=prediction)
#Sorting values in descending order of probability of bank failing and printing the head
dffff = predict.sort_values(by=['Prediction'], ascending = False).head(50)
print("wewqeehqet")
train = df_model[df_model['dates'] < '2025-03-01']
predict = df_model[df_model['dates'] == '2025-03-01']
train['dates'] = str([train['dates']])
train['glb'] = str([train['glb']])
predict['dates'] = str([predict['dates']])
predict['glb'] = str([predict['glb']])
train_cleaned = train.drop(train.select_dtypes(['object']), axis=1)
predict_cleaned = predict.drop(predict.select_dtypes(['object']), axis=1)
x_train = train_cleaned.drop('y', axis = 1).values
y_train = train_cleaned['y'].values
x_test = predict_cleaned.drop('y', axis = 1).values
y_test = predict_cleaned['y'].values
mms = MinMaxScaler()
mms = MinMaxScaler()
mms.fit(x_train)
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
mms.fit(x_train)
x_train_norm = pd.DataFrame(mms.transform(x_train), columns=pd.DataFrame(x_train).columns)
#mms.fit(x_test)
x_test_norm = pd.DataFrame(mms.transform(x_test), columns=pd.DataFrame(x_test).columns)
print(x_train_norm.describe())
print(x_test_norm.describe())
logisticRegr = LogisticRegression()
logisticRegr.fit(x_train_norm, y_train)
print(logisticRegr.score(x_train_norm, y_train))
print(logisticRegr.coef_)
print(logisticRegr.intercept_)
prediction = logisticRegr.predict_proba(x_test_norm)
prediction = prediction[:,1].tolist()
print(prediction)
#Creating a new column called Prediction in predict dataframe
predict = predict.assign(Prediction=prediction)
#Sorting values in descending order of probability of bank failing and printing the head
dffff = predict.sort_values(by=['Prediction'], ascending = False).head(50)
print("wewqeehqet")
View(dffff)
View(dffff)
str(111)
shiny::runApp('crmNavbar')
mtcars
summary(mtcars)
library(psych)
install.packages("psych")
library(psych)
describe(mtcars)
shiny::runApp('crmNavbar')
runApp('crmNavbar')
getwd()
shiny::runApp('AccordSurveys')
runApp('AccordSurveys')
paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date)
paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y"))) %>% group_by(question_id, date)
paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")))
paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y"))
replace(paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")),"Q1","в першому кварталі"
)
replace(paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")),"Q1","в першому кварталі")
gsub(paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")),"Q1","в першому кварталі")
gsub(paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")),"Q1","в 1 кварталі")
gsub(,"Q1","в 1 кварталі",paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")))
gsub("Q1","в 1 кварталі",paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")))
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
print(data)
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
print(res)
gsub("Q1","в 1 кварталі",paste(quarters(floor_date(Sys.Date(), "quarter")-1),format(floor_date(Sys.Date(), "quarter")-1,"%Y")))
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
print(data)
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
print(res)
runApp('AccordSurveys')
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
print(data)
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
print(res)
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
library(DT)
install.packages("DT")
library(DT)
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
poolClose(pool)
runApp('AccordSurveys')
runApp('AccordSurveys')
poolClose(pool)
runApp('AccordSurveys')
poolClose(pool)
runApp('AccordSurveys')
runApp('AccordSurveys')
shiny::runApp('AccordSurveys')
runApp('crmNavbar')
runApp('crmNavbar')
runApp('crmNavbar')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
shiny::runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
install.packages("reactable")
librara(reactable)
library(reactable)
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
data
print(class(data))
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
print(class(data))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
print(res)
print(class(data))
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
print(res)
print(class(data))
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
runApp('AccordSurveys')
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
res %>% rename("question_id" = "qqq")
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
res %>% rename("www" = "question_id")
print(res)
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
res <- res %>% rename("www" = "question_id")
print(res)
library(pool)
library(DBI)
library(dplyr)
library(tidyr)
library(RMySQL)
pool <- pool::dbPool(
drv = RMySQL::MySQL(),
dbname = "accordsurveys",
host = "127.0.0.1",
username = "root",
password = "WIN72007@NAZAr"
)
data = dbGetQuery(pool, paste0("SELECT * from results where q in ('q11') and response not in ('не було комунікації')"))
res <- data %>% mutate(date = paste(quarters(floor_date(as.Date(date), "quarter")-1),format(floor_date(as.Date(date), "quarter")-1,"%Y"))) %>% group_by(question_id, date) %>%
summarise(mean = mean(as.double(response))) %>%
spread(date, mean)
res <- res %>% rename("Підрозділ Головного Банку" = "question_id")
print(res)
runApp('AccordSurveys')
